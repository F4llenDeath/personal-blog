---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import PostHead from '@/components/PostHead.astro'
import PostNavigation from '@/components/PostNavigation.astro'
import TableOfContents from '@/components/TableOfContents.astro'
import { badgeVariants } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Separator } from '@/components/ui/separator'
import {
  formatLocalizedDate,
  getLangFromUrl,
  useTranslatedPath,
  useTranslations,
} from '@/i18n/util'
import Layout from '@/layouts/Layout.astro'
import { getAdjacentPosts, getAllPosts } from '@/lib/data-utils'
import { readingTime } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import { render } from 'astro:content'

export async function getStaticPaths() {
  const posts = await getAllPosts('zh')
  return posts.map((post) => {
    const parts = post.id.split('/')
    const slug = parts.slice(0, -1).join('/')
    return {
      params: { id: slug },
      props: post,
    }
  })
}

const post = Astro.props
const currentPostId = post.id
const { Content, headings } = await render(post)
const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
const translatePath = useTranslatedPath(lang)
const { next, prev } = await getAdjacentPosts(currentPostId, lang)
---

<Layout isWide>
  <PostHead slot="head" post={post} />
  <section
    class="grid grid-cols-[minmax(0px,1fr)_min(calc(var(--breakpoint-md)-2rem),100%)_minmax(0px,1fr)] gap-y-6"
  >
    <div class="col-start-2">
      <Breadcrumbs
        items={[
          {
            href: translatePath('/blog'),
            label: 'nav.blog',
            icon: 'lucide:archive',
          },
          { label: post.data.title, icon: 'lucide:file-text' },
        ]}
      />
    </div>
    {
      post.data.image && (
        <Image
          src={post.data.image}
          alt={post.data.title}
          format="avif"
          quality={30}
          widths={[600, 1200, 1800, 2400]}
          sizes="(min-width: 1024px) 60vw, 100vw"
          class="col-span-full mx-auto w-full max-w-5xl object-cover"
        />
      )
    }
    <section class="col-start-2 flex flex-col gap-y-6 text-center">
      <div class="flex flex-col">
        <h1
          class="mb-2 text-4xl leading-tight font-medium text-pretty sm:text-5xl"
        >
          {post.data.title}
        </h1>

        <div
          class="text-muted-foreground mb-4 flex flex-wrap items-center justify-center gap-2 text-sm"
        >
          <div class="flex items-center gap-2">
            <span>{formatLocalizedDate(post.data.date, lang)}</span>
            <Separator orientation="vertical" className="h-4!" />
            <span
              >{
                t('blog.readTime', {
                  time: readingTime(post.body ?? '').replace(/\s*read$/, ''),
                })
              }</span
            >
          </div>
        </div>
        <div class="flex flex-wrap justify-center gap-2">
          {
            post.data.tags && post.data.tags.length > 0 ? (
              post.data.tags.map((tag) => (
                <a
                  href={translatePath(`/tags/${tag}`)}
                  class={badgeVariants({ variant: 'secondary' })}
                >
                  <Icon name="lucide:hash" class="size-3" />
                  {tag}
                </a>
              ))
            ) : (
              <span class="text-muted-foreground text-sm">暂无标签</span>
            )
          }
        </div>
      </div>

      <PostNavigation prevPost={prev} nextPost={next} />
    </section>

    {headings.length > 0 && <TableOfContents headings={headings} />}

    <article class="prose col-start-2 max-w-none">
      <Content />
    </article>

    <PostNavigation prevPost={prev} nextPost={next} />
  </section>

  <aside class="mt-8 rounded-lg bg-secondary/20 p-4 text-sm text-muted-foreground">
    <div class="flex items-center gap-2 justify-center">
      <div class="flex flex-col text-center">
        <p class="m-0">
          文本内容根据
          <a
            href="https://creativecommons.org/licenses/by-nc/4.0/"
            target="_blank"
            rel="noopener noreferrer"
            class="underline hover:text-primary"
          >
            CC BY‑NC 4.0
          </a> 授权
        </p>
        <p class="m-0">
          代码片段根据
          <a
            href="https://opensource.org/licenses/MIT"
            target="_blank"
            rel="noopener noreferrer"
            class="underline hover:text-primary"
          >
            MIT 许可证
          </a> 授权
        </p>
        <p class="m-0">
          照片根据
          <a
            href="https://creativecommons.org/licenses/by-nc/4.0/"
            target="_blank"
            rel="noopener noreferrer"
            class="underline hover:text-primary"
          >
            CC BY‑NC 4.0
          </a> 授权
        </p>
      </div>
    </div>
  </aside>

  <Button
    variant="outline"
    size="icon"
    className="group fixed right-8 bottom-8 z-50 hidden"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon
      name="lucide:arrow-up"
      class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
    />
  </Button>

  <script>
    document.addEventListener('astro:page-load', () => {
      const scrollToTopButton = document.getElementById('scroll-to-top')
      const footer = document.querySelector('footer')

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' })
        })

        window.addEventListener('scroll', () => {
          const footerRect = footer.getBoundingClientRect()
          const isFooterVisible = footerRect.top <= window.innerHeight

          scrollToTopButton.classList.toggle(
            'hidden',
            window.scrollY <= 300 || isFooterVisible,
          )
        })
      }
    })
  </script>
</Layout>
