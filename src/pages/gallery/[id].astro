---
import { getCollection } from "astro:content";
import { defaultLang } from '@/i18n/ui';
import { getAlbumImages } from '@/utils/albums';
import type { AlbumImage } from '@/utils/albums';
import { Image } from "astro:assets";
import Layout from '@/layouts/Layout.astro'
import PageHead from '@/components/PageHead.astro';
import Breadcrumbs from '@/components/Breadcrumbs.astro';
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@/i18n/util';

export async function getStaticPaths() {
  const allAlbums = await getCollection('albums');
  const albums = allAlbums.filter(
    (album) => (album.data.lang ?? defaultLang) === defaultLang
  );

  const paths = albums.map((album) => {
    return {
      params: {
        id: album.id,
      },
      props: {
        album,
      },
    };
  });

  return paths;
}

const { album } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
// Load all original images with their dimensions
const images: AlbumImage[] = await getAlbumImages(album.id);
---
<Layout>
  <PageHead slot="head" title={album.data.title} description={album.data.description} />
  <Breadcrumbs items={[
    { href: translatePath('/gallery'), label: 'nav.gallery', icon: 'lucide:image' },
    { label: album.data.title }
  ]} />
  <main class="text-center my-16 mb-32">
    <h1 class="mb-6 text-4xl font-bold sm:text-5xl">{album.data.title}</h1>

    {album.data.description && (
      <div class="prose mb-8 space-y-4">
        {album.data.description.split('\n\n').map((para) => (
          <p>{para}</p>
        ))}
      </div>
    )}

    <div class="mx-auto container my-8 sm:columns-1 md:columns-2 lg:columns-3 px-4">
      {images.map(({ src, width, height }) => (
        <Image
          src={src}
          alt={`Image from ${album.data.title} album`}
          width={width}
          height={height}
          format="avif"
          quality={50}
          class="rounded-sm mb-4 border border-transparent hover:border-gray-300 transition-all duration-300 ease-in-out hover:shadow-lg"
          loading="lazy"
        />
      ))}
    </div>

    <div class="mt-12 flex justify-center">
      <a
        href={translatePath('/gallery')}
        class="group flex w-fit items-center gap-3 rounded-xl border border-border px-6 py-4 transition hover:bg-secondary/50"
      >
        <div class="text-left leading-none">
          <div class="text-sm text-muted-foreground">{t('gallery.back')}</div>
          <div class="font-semibold text-foreground">{t('nav.gallery')}</div>
        </div>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="size-5 rotate-180 text-muted-foreground transition group-hover:text-foreground"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </a>
    </div>
  </main>
</Layout>